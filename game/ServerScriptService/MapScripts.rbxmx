<roblox version="4">
  <Item class="Folder" referent="0">
    <Properties>
      <string name="Name">Map Scripts</string>
      <BinaryString name="AttributesSerialize"></BinaryString>
      <SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
      <bool name="DefinesCapabilities">false</bool>
      <int64 name="SourceAssetId">-1</int64>
      <BinaryString name="Tags"></BinaryString>
    </Properties>
    <Item class="Script" referent="1">
      <Properties>
        <string name="Name">TreeRotationScript</string>
        <BinaryString name="AttributesSerialize"></BinaryString>
        <SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
        <bool name="Disabled">false</bool>
        <ContentId name="LinkedSource">
          <null>
          </null>
        </ContentId>
        <token name="RunContext">0</token>
        <bool name="DefinesCapabilities">false</bool>
        <string name="Source">local function randomRotation(model, isDeadTree)
	if not model.PrimaryPart then
		model.PrimaryPart = model:FindFirstChild("Trunk") or model:FindFirstChild("Main") or model:GetChildren()[1]
	end

	if model.PrimaryPart then
		local xRot, yRot, zRot

		if isDeadTree then
			xRot = math.random(-15, 15)
			yRot = math.random(-360, 360)
			zRot = math.random(-15, 15)
		else
			xRot = math.random(-5, 5)
			yRot = math.random(-360, 360)
			zRot = math.random(-5, 5)
		end

		local rotation = CFrame.Angles(math.rad(xRot), math.rad(yRot), math.rad(zRot))
		model:SetPrimaryPartCFrame(model.PrimaryPart.CFrame * rotation)
	end
end

local trees = {}
for _, model in pairs(workspace:GetDescendants()) do
	if model:IsA("Model") and (model.Name == "tree1" or model.Name == "tree2" or model.Name == "deadtree") then
		table.insert(trees, model)
	end
end

for _, tree in pairs(trees) do
	local isDeadTree = (tree.Name == "deadtree")
	randomRotation(tree, isDeadTree)
end</string>
        <int64 name="SourceAssetId">-1</int64>
        <BinaryString name="Tags"></BinaryString>
      </Properties>
    </Item>
    <Item class="Script" referent="2">
      <Properties>
        <string name="Name">TireStackDestructionScript</string>
        <BinaryString name="AttributesSerialize"></BinaryString>
        <SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
        <bool name="Disabled">false</bool>
        <ContentId name="LinkedSource">
          <null>
          </null>
        </ContentId>
        <token name="RunContext">0</token>
        <bool name="DefinesCapabilities">false</bool>
        <string name="Source">local respawnTime = 35
local minimumSpeed = 5

local tyreStacks = {}
for _, model in pairs(workspace:GetDescendants()) do
	if model:IsA("Model") and (model.Name == "tyre stack" or model.Name == "tyre stack 1") then
		table.insert(tyreStacks, model)
	end
end

for _, model in pairs(tyreStacks) do
	if not model.PrimaryPart then
		continue
	end

	local originalCFrame = model.PrimaryPart.CFrame
	local debounce = false

	local function respawn()
		if debounce then return end
		debounce = true

		task.wait(respawnTime)

		model:SetPrimaryPartCFrame(originalCFrame)

		for _, part in ipairs(model:GetDescendants()) do
			if part:IsA("BasePart") then
				part.Anchored = true
			end
		end

		task.wait(0.1)

		for _, part in ipairs(model:GetDescendants()) do
			if part:IsA("BasePart") then
				part.Anchored = false
			end
		end

		debounce = false
	end

	model.PrimaryPart.Touched:Connect(function(hit)
		if hit and hit:IsA("BasePart") and not debounce then
			local hitVelocity = hit.AssemblyLinearVelocity
			local speed = hitVelocity.Magnitude

			if speed &gt;= minimumSpeed then
				task.spawn(respawn)
			end
		end
	end)
end</string>
        <int64 name="SourceAssetId">-1</int64>
        <BinaryString name="Tags"></BinaryString>
      </Properties>
    </Item>
    <Item class="Script" referent="3">
      <Properties>
        <string name="Name">Rock&amp;BushRotationScript</string>
        <BinaryString name="AttributesSerialize"></BinaryString>
        <SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
        <bool name="Disabled">false</bool>
        <ContentId name="LinkedSource">
          <null>
          </null>
        </ContentId>
        <token name="RunContext">0</token>
        <bool name="DefinesCapabilities">false</bool>
        <string name="Source">local function randomRotation(model)
	if not model.PrimaryPart then
		model.PrimaryPart = model:FindFirstChild("Main") or model:GetChildren()[1]
	end

	if model.PrimaryPart then
		local xRot = math.random(-360, 360)
		local yRot = math.random(-360, 360)
		local zRot = math.random(-360, 360)

		local rotation = CFrame.Angles(math.rad(xRot), math.rad(yRot), math.rad(zRot))
		model:SetPrimaryPartCFrame(model.PrimaryPart.CFrame * rotation)
	end
end

local objects = {}
for _, model in pairs(workspace:GetDescendants()) do
	if model:IsA("Model") and (model.Name == "Rock" or model.Name == "Bush") then
		table.insert(objects, model)
	end
end

for _, object in pairs(objects) do
	randomRotation(object)
end</string>
        <int64 name="SourceAssetId">-1</int64>
        <BinaryString name="Tags"></BinaryString>
      </Properties>
    </Item>
    <Item class="Script" referent="4">
      <Properties>
        <string name="Name">ParkingLotLightsDestructionScript</string>
        <BinaryString name="AttributesSerialize"></BinaryString>
        <SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
        <bool name="Disabled">false</bool>
        <ContentId name="LinkedSource">
          <null>
          </null>
        </ContentId>
        <token name="RunContext">0</token>
        <bool name="DefinesCapabilities">false</bool>
        <string name="Source">local lights = {}
for _, model in pairs(workspace:GetDescendants()) do
	if model:IsA("Model") and model.Name == "parking lot light2" then
		table.insert(lights, model)
	end
end

for _, model in pairs(lights) do
	local light = model:FindFirstChild("Cube.001")
	local respawnTime = 35
	local debounce = false
	local minimumSpeed = 50

	if not model.PrimaryPart or not light then
		continue
	end

	local originalCFrame = model.PrimaryPart.CFrame

	model.PrimaryPart.Anchored = true
	light.Color = Color3.fromRGB(221, 249, 255)
	light.PointLight.Enabled = true

	local function respawn()
		if debounce then return end
		debounce = true

		task.wait(respawnTime)

		model:SetPrimaryPartCFrame(originalCFrame)
		model.PrimaryPart.Anchored = true
		light.Color = Color3.fromRGB(221, 249, 255)
		light.PointLight.Enabled = true

		for _, part in ipairs(model:GetDescendants()) do
			if part:IsA("BasePart") then
			end
		end

		task.wait(0.25)

		for _, part in ipairs(model:GetDescendants()) do
			if part:IsA("BasePart") then
			end
		end

		debounce = false
	end

	model.PrimaryPart.Touched:Connect(function(hit)
		if hit and hit:IsA("BasePart") and not debounce then
			local hitVelocity = hit.AssemblyLinearVelocity
			local speed = hitVelocity.Magnitude

			if speed &gt;= minimumSpeed then
				model.PrimaryPart.Anchored = false
				task.spawn(respawn)
				light.Color = Color3.fromRGB(0, 0, 0)
				light.PointLight.Enabled = false
			end
		end
	end)
end</string>
        <int64 name="SourceAssetId">-1</int64>
        <BinaryString name="Tags"></BinaryString>
      </Properties>
    </Item>
    <Item class="Script" referent="5">
      <Properties>
        <string name="Name">FireHydrantDestructionScript</string>
        <BinaryString name="AttributesSerialize"></BinaryString>
        <SecurityCapabilities name="Capabilities">0</SecurityCapabilities>
        <bool name="Disabled">false</bool>
        <ContentId name="LinkedSource">
          <null>
          </null>
        </ContentId>
        <token name="RunContext">0</token>
        <bool name="DefinesCapabilities">false</bool>
        <string name="Source">local hydrants = {}
for _, model in pairs(workspace:GetDescendants()) do
	if model:IsA("Model") and model.Name == "Fire Hydrant" then
		table.insert(hydrants, model)
	end
end

for _, model in pairs(hydrants) do
	local main = model:FindFirstChild("Main")
	local collision = model:FindFirstChild("Collision")
	local effect = model:FindFirstChild("Effect")
	local respawnTime = 35
	local forceTime = 0.25
	local forceStrength = 150
	local minimumSpeed = 50
	local debounce = false
	local waterForceStrength = 1900
	local waterForceRadius = 10
	local waterForceInterval = 0.3
	local isApplyingForce = false

	if not (main and collision and effect) then
		continue
	end

	local particleEmitter = effect:FindFirstChildOfClass("ParticleEmitter")
	if not particleEmitter then
		continue
	end

	local triggeredSound = main:FindFirstChild("TriggeredSound")
	local sprayingSound = effect:FindFirstChild("SprayingSound")
	local originalCFrame = main.CFrame

	local function applyWaterForce()
		if not isApplyingForce then return end

		local hydrantPosition = effect.Position
		local objectsInWorkspace = workspace:GetDescendants()

		for _, object in pairs(objectsInWorkspace) do
			if object:IsA("BasePart") and not object.Anchored then
				local objectPosition = object.Position
				local distance = (objectPosition - hydrantPosition).Magnitude

				if distance &lt;= waterForceRadius and objectPosition.Y &gt; hydrantPosition.Y then
					local forceMagnitude = waterForceStrength * (1 - (distance / waterForceRadius))

					local force = Vector3.new(0, forceMagnitude, 0)
					object:ApplyImpulse(force * object:GetMass())
				end
			end
		end

		if isApplyingForce then
			task.delay(waterForceInterval, applyWaterForce)
		end
	end

	local function respawn()
		task.wait(respawnTime)
		main.CFrame = originalCFrame
		main.Anchored = true
		particleEmitter.Enabled = false
		if sprayingSound then
			sprayingSound:Stop()
		end
		isApplyingForce = false
		debounce = false
	end

	local function activateHydrant()
		if debounce then return end
		debounce = true
		main.Anchored = false

		if triggeredSound then
			triggeredSound:Play()
		end

		local force = Instance.new("BodyVelocity")
		force.Velocity = Vector3.new(0, forceStrength, 0)
		force.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
		force.Parent = main

		task.wait(forceTime)
		force:Destroy()

		particleEmitter.Enabled = true
		if sprayingSound then
			sprayingSound:Play()
		end

		isApplyingForce = true
		applyWaterForce()

		task.spawn(respawn)
	end

	collision.Touched:Connect(function(hit)
		if hit and hit:IsA("BasePart") and not debounce then
			local hitVelocity = hit.AssemblyLinearVelocity
			local speed = hitVelocity.Magnitude
			if speed &gt;= minimumSpeed then
				activateHydrant()
			end
		end
	end)
end</string>
        <int64 name="SourceAssetId">-1</int64>
        <BinaryString name="Tags"></BinaryString>
      </Properties>
    </Item>
  </Item>
</roblox>